{"name":"Ramble","tagline":"A R parser based on combinatory parsers.","body":"This project is just an example to examine the functional components of R. \r\n\r\nGoals\r\n=====\r\n\r\nCreate a [parser combinator](http://en.wikipedia.org/wiki/Parser_combinator) written in\r\npure R. This is mostly a proof of concept, but could be useful or helpful to someone.\r\n\r\nThis is inspired by **Programming in Haskell by Graham Hutton**, and also the \r\n[JavaScript port](https://github.com/matthandlersux/functional-parser), and \r\nPython's [recursive descent parsing library](https://pypi.python.org/pypi/funcparserlib/).\r\n\r\n**References:**  \r\n\r\n*  [Higher-order functions for parsing](http://eprints.nottingham.ac.uk/221/1/parsing.pdf)\r\n\r\nExample\r\n=======\r\n\r\n```r\r\n#' expr :: = term + term | term - term | term\r\n#' term :: = factor * factor | factor / factor | factor\r\n#' factor :: = (expr) | digit+\r\n\r\nexpr <- ((term %then% \r\n            symbol(\"+\") %then%\r\n            expr %using% function(x) {\r\n              print(unlist(c(x)))\r\n              return(sum(as.numeric(unlist(c(x))[c(1,3)])))\r\n            }) %alt% \r\n           (term %then% \r\n              symbol(\"-\") %then%\r\n              expr %using% function(x) {\r\n                print(unlist(c(x)))\r\n                return(Reduce(\"-\", as.numeric(unlist(c(x))[c(1,3)])))\r\n              }) %alt% term)\r\n\r\n\r\nterm <- ((factor %then% \r\n             symbol(\"*\") %then%\r\n             term %using% function(x) {\r\n               print(unlist(c(x)))\r\n               return(prod(as.numeric(unlist(c(x))[c(1,3)])))\r\n             }) %alt% \r\n           (factor %then% \r\n              symbol(\"/\") %then%\r\n              term %using% function(x) {\r\n                print(unlist(c(x)))\r\n                return(Reduce(\"/\", as.numeric(unlist(c(x))[c(1,3)])))\r\n              }) %alt% factor)\r\n\r\nfactor <- ((\r\n    symbol(\"(\") %then%\r\n      expr %then%\r\n      symbol(\")\") %using% \r\n      function(x){\r\n        print(unlist(c(x)))\r\n        return(as.numeric(unlist(c(x))[2]))\r\n        })\r\n    %alt% natural())\r\n```\r\n\r\n**Output**:  \r\n\r\n```r\r\n> expr(\"(1+1)*2\")\r\n[1] \"1\" \"+\" \"1\"\r\n[1] \"(\" \"2\" \")\"\r\n[1] \"2\" \"*\" \"2\"\r\n[1] \"1\" \"+\" \"1\"\r\n[1] \"(\" \"2\" \")\"\r\n[1] \"2\" \"*\" \"2\"\r\n[1] \"1\" \"+\" \"1\"\r\n[1] \"(\" \"2\" \")\"\r\n[1] \"2\" \"*\" \"2\"\r\n$result\r\n[1] 4\r\n\r\n$leftover\r\n[1] \"\"\r\n\r\n> expr(\"(1+2)*3\")\r\n[1] \"1\" \"+\" \"2\"\r\n[1] \"(\" \"3\" \")\"\r\n[1] \"3\" \"*\" \"3\"\r\n[1] \"1\" \"+\" \"2\"\r\n[1] \"(\" \"3\" \")\"\r\n[1] \"3\" \"*\" \"3\"\r\n[1] \"1\" \"+\" \"2\"\r\n[1] \"(\" \"3\" \")\"\r\n[1] \"3\" \"*\" \"3\"\r\n$result\r\n[1] 9\r\n\r\n$leftover\r\n[1] \"\"\r\n\r\n> expr(\"1*(2+3)*4*5\")\r\n[1] \"2\" \"+\" \"3\"\r\n[1] \"(\" \"5\" \")\"\r\n[1] \"4\" \"*\" \"5\"\r\n[1] \"5\"  \"*\"  \"20\"\r\n[1] \"1\"   \"*\"   \"100\"\r\n[1] \"2\" \"+\" \"3\"\r\n[1] \"(\" \"5\" \")\"\r\n[1] \"4\" \"*\" \"5\"\r\n[1] \"5\"  \"*\"  \"20\"\r\n[1] \"1\"   \"*\"   \"100\"\r\n[1] \"2\" \"+\" \"3\"\r\n[1] \"(\" \"5\" \")\"\r\n[1] \"4\" \"*\" \"5\"\r\n[1] \"5\"  \"*\"  \"20\"\r\n[1] \"1\"   \"*\"   \"100\"\r\n$result\r\n[1] 100\r\n\r\n$leftover\r\n[1] \"\"\r\n\r\n> expr(\"(4-2)+3\")\r\n[1] \"4\" \"-\" \"2\"\r\n[1] \"(\" \"2\" \")\"\r\n[1] \"4\" \"-\" \"2\"\r\n[1] \"(\" \"2\" \")\"\r\n[1] \"4\" \"-\" \"2\"\r\n[1] \"(\" \"2\" \")\"\r\n[1] \"2\" \"+\" \"3\"\r\n$result\r\n[1] 5\r\n\r\n$leftover\r\n[1] \"\"\r\n```","google":"UA-54510916-1","note":"Don't delete this file! It's used internally to help with page regeneration."}